[
  {
    "ruleName": "angular-whitespace",
    "type": "style",
    "description": "Ensures the proper formatting of Angular expressions.",
    "rationale": "Having whitespace in the right places in an Angular expression makes the template more readable.",
    "optionsDescription":
      "\nArguments may be optionally provided:\n* `\"check-interpolation\"` checks for whitespace before and after the interpolation characters\n* `\"check-pipe\"` checks for whitespace before and after a pipe\n* `\"check-semicolon\"` checks for whitespace after semicolon",
    "options": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["check-interpolation", "check-pipe", "check-semicolon"]
      },
      "minLength": 0,
      "maxLength": 3
    },
    "optionExamples": ["[true, \"check-interpolation\"]"],
    "typescriptOnly": true,
    "hasFix": true
  },
  {
    "ruleName": "banana-in-box",
    "type": "functionality",
    "description": "Ensure that the two-way data binding syntax is correct.",
    "rationale": "The parens \"()\" should have been inside the brackets \"[]\".",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true,
    "hasFix": true
  },
  {
    "ruleName": "component-class-suffix",
    "type": "style",
    "description": "Classes decorated with @Component must have suffix \"Component\" (or custom) in their name.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-02-03.",
    "rationale": "Consistent conventions make it easy to quickly identify and reference assets of different types.",
    "options": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "optionExamples": ["true", "[true, \"Component\", \"View\"]"],
    "optionsDescription": "Supply a list of allowed component suffixes. Defaults to \"Component\".",
    "typescriptOnly": true
  },
  {
    "ruleName": "component-selector",
    "type": "style",
    "description": "Component selectors should follow given naming rules.",
    "descriptionDetails":
      "See more at https://angular.io/styleguide#style-02-07, https://angular.io/styleguide#style-05-02, and https://angular.io/styleguide#style-05-03.",
    "rationale":
      "\n* Consistent conventions make it easy to quickly identify and reference assets of different types.\n* Makes it easier to promote and share the component in other apps.\n* Components are easy to identify in the DOM.\n* Keeps the element names consistent with the specification for Custom Elements.\n* Components have templates containing HTML and optional Angular template syntax.\n    * They display content. Developers place components on the page as they would native HTML elements and WebComponents.\n* It is easier to recognize that a symbol is a component by looking at the template's HTML.\n",
    "options": {
      "type": "array",
      "items": [
        {
          "enum": ["element", "attribute"]
        },
        {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        {
          "enum": ["kebab-case", "camelCase"]
        }
      ],
      "minItems": 3,
      "maxItems": 3
    },
    "optionExamples": [
      "[\"element\", \"my-prefix\", \"kebab-case\"]",
      "[\"element\", [\"ng\", \"ngx\"], \"kebab-case\"]",
      "[\"attribute\", \"myPrefix\", \"camelCase\"]"
    ],
    "optionsDescription":
      "\nOptions accept three obligatory items as an array:\n\n1. `\"element\"` or `\"attribute\"` forces components either to be elements or attributes.\n2. A single prefix (string) or array of prefixes (strings) which have to be used in component selectors.\n3. `\"kebab-case\"` or `\"camelCase\"` allows you to pick a case.\n",
    "typescriptOnly": true
  },
  {
    "ruleName": "contextual-life-cycle",
    "type": "functionality",
    "description": "Ensure that classes use allowed life cycle method in its body",
    "rationale":
      "Some life cycle methods can only be used in certain class types.\n    For example, ngOnInit() hook method should not be used in an @Injectable class.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "decorator-not-allowed",
    "type": "functionality",
    "description": "Ensure that classes use allowed decorator in its body",
    "rationale":
      "Some decorators can only be used in certain class types.\n    For example, an @Input should not be used in an @Injectable class.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "directive-class-suffix",
    "type": "style",
    "description": "Classes decorated with @Directive must have suffix \"Directive\" (or custom) in their name.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-02-03.",
    "rationale": "Consistent conventions make it easy to quickly identify and reference assets of different types.",
    "options": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "optionExamples": ["true", "[true, \"Directive\", \"MySuffix\"]"],
    "optionsDescription": "Supply a list of allowed component suffixes. Defaults to \"Directive\".",
    "typescriptOnly": true
  },
  {
    "ruleName": "directive-selector",
    "type": "style",
    "description": "Directive selectors should follow given naming rules.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-02-06 and https://angular.io/styleguide#style-02-08.",
    "rationale":
      "\n* Consistent conventions make it easy to quickly identify and reference assets of different types.\n* Makes it easier to promote and share the directive in other apps.\n* Directives are easy to identify in the DOM.\n* It is easier to recognize that a symbol is a directive by looking at the template's HTML.\n",
    "options": {
      "type": "array",
      "items": [
        {
          "enum": ["element", "attribute"]
        },
        {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        {
          "enum": ["kebab-case", "camelCase"]
        }
      ],
      "minItems": 3,
      "maxItems": 3
    },
    "optionExamples": [
      "[\"element\", \"my-prefix\", \"kebab-case\"]",
      "[\"element\", [\"ng\", \"ngx\"], \"kebab-case\"]",
      "[\"attribute\", \"myPrefix\", \"camelCase\"]"
    ],
    "optionsDescription":
      "\nOptions accept three obligatory items as an array:\n\n1. `\"element\"` or `\"attribute\"` forces components either to be elements or attributes.\n2. A single prefix (string) or array of prefixes (strings) which have to be used in directive selectors.\n3. `\"kebab-case\"` or `\"camelCase\"` allows you to pick a case.\n",
    "typescriptOnly": true
  },
  {
    "ruleName": "i18n",
    "type": "maintainability",
    "description": "Ensures following best practices for i18n.",
    "rationale": "Makes the code more maintainable in i18n sense.",
    "optionsDescription":
      "\nArguments may be optionally provided:\n* `\"check-id\"` Makes sure i18n attributes have ID specified\n* `\"check-text\"` Makes sure there are no elements with text content but no i18n attribute\n    ",
    "options": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["check-id", "check-text"]
      },
      "minLength": 0,
      "maxLength": 3
    },
    "optionExamples": ["[true, \"check-id\"]"],
    "typescriptOnly": true
  },
  {
    "ruleName": "import-destructuring-spacing",
    "type": "style",
    "description": "Ensure consistent and tidy imports.",
    "rationale": "Imports are easier for the reader to look at when they're tidy.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "no-attribute-parameter-decorator",
    "type": "maintainability",
    "description": "Disallow usage of @Attribute decorator",
    "rationale": "@Attribute is considered bad practice. Use @Input instead.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "no-forward-ref",
    "type": "maintainability",
    "description": "Disallows usage of forward references for DI.",
    "rationale": "The flow of DI is disrupted by using `forwardRef` and might make code more difficult to understand.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "no-input-rename",
    "type": "maintainability",
    "description": "Disallows renaming directive inputs by providing a string to the decorator.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-13.",
    "rationale": "Two names for the same property (one private, one public) is inherently confusing.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "no-output-named-after-standard-event",
    "type": "maintainability",
    "description": "Disallows naming directive outputs after a standard DOM event.",
    "rationale": "Listeners subscribed to an output with such a name will also be invoked when the native event is raised.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "no-output-on-prefix",
    "type": "maintainability",
    "description": "Name events without the prefix on",
    "descriptionDetails": "See more at https://angular.io/guide/styleguide#dont-prefix-output-properties",
    "rationale":
      "Angular allows for an alternative syntax on-*. If the event itself was prefixed with on\n     this would result in an on-onEvent binding expression",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "no-output-rename",
    "type": "maintainability",
    "description": "Disallows renaming directive outputs by providing a string to the decorator.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-13.",
    "rationale": "Two names for the same property (one private, one public) is inherently confusing.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "no-unused-css",
    "type": "maintainability",
    "description": "Disallows having an unused CSS rule in the component's stylesheet.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true,
    "hasFix": true
  },
  {
    "ruleName": "pipe-impure",
    "type": "functionality",
    "description": "Pipes cannot be declared as impure.",
    "rationale": "Impure pipes do not perform well because they are run on every change detection cycle.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "pipe-naming",
    "type": "style",
    "description": "Enforce consistent case and prefix for pipes.",
    "rationale": "Consistent conventions make it easy to quickly identify and reference assets of different types.",
    "options": {
      "type": "array",
      "items": [
        {
          "enum": ["kebab-case", "attribute"]
        },
        {
          "type": "string"
        }
      ],
      "minItems": 1
    },
    "optionExamples": [
      "[\"camelCase\", \"myPrefix\"]",
      "[\"camelCase\", \"myPrefix\", \"myOtherPrefix\"]",
      "[\"kebab-case\", \"my-prefix\"]"
    ],
    "optionsDescription":
      "\n* The first item in the array is `\"kebab-case\"` or `\"camelCase\"`, which allows you to pick a case.\n* The rest of the arguments are supported prefixes (given as strings). They are optional.",
    "typescriptOnly": true
  },
  {
    "ruleName": "templates-no-negated-async",
    "type": "functionality",
    "description": "Ensures that strict equality is used when evaluating negations on async pipe outout.",
    "rationale":
      "Async pipe evaluate to `null` before the observable or promise emits, which can lead to layout thrashing as components load. Prefer strict `=== false` checks instead.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true,
    "hasFix": true
  },
  {
    "ruleName": "trackBy-function",
    "type": "functionality",
    "description": "Ensures a TrackBy function is used.",
    "rationale": "Using TrackBy is considired as a best pratice.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "use-host-property-decorator",
    "type": "style",
    "description": "Use @HostProperty decorator rather than the `host` property of `@Component` and `@Directive` metadata.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-06-03.",
    "rationale":
      "The property associated with `@HostBinding` or the method associated with `@HostListener` can be modified only in a single place: in the directive's class. If you use the `host` metadata property, you must modify both the property declaration inside the controller, and the metadata associated with the directive.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "use-input-property-decorator",
    "type": "style",
    "description": "Use `@Input` decorator rather than the `inputs` property of `@Component` and `@Directive` metadata.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-12.",
    "rationale":
      "\n* It is easier and more readable to identify which properties in a class are inputs.\n* If you ever need to rename the property name associated with `@Input`, you can modify it in a single place.\n* The metadata declaration attached to the directive is shorter and thus more readable.\n* Placing the decorator on the same line usually makes for shorter code and still easily identifies the property as an input.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "use-life-cycle-interface",
    "type": "maintainability",
    "description": "Ensure that components implement life cycle interfaces if they use them.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-09-01.",
    "rationale": "Interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "use-output-property-decorator",
    "type": "style",
    "description": "Use `@Output` decorator rather than the `outputs` property of `@Component` and `@Directive` metadata.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-12.",
    "rationale":
      "\n* It is easier and more readable to identify which properties in a class are events.\n* If you ever need to rename the event name associated with `@Output`, you can modify it in a single place.\n* The metadata declaration attached to the directive is shorter and thus more readable.\n* Placing the decorator on the same line usually makes for shorter code and still easily identifies the property as an output.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "use-pipe-decorator",
    "type": "maintainability",
    "description": "Ensure that classes implementing PipeTransform interface, use Pipe decorator",
    "rationale": "Interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "use-pipe-transform-interface",
    "type": "maintainability",
    "description": "Ensure that pipes implement PipeTransform interface.",
    "rationale": "Interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true
  },
  {
    "ruleName": "use-view-encapsulation",
    "type": "maintainability",
    "description": "Disallows using of ViewEncapsulation.None",
    "rationale": "",
    "options": null,
    "optionsDescription": "Not configurable",
    "typescriptOnly": true
  }
]
